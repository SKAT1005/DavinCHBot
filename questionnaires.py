import datetime
import math
import os
import random
from itertools import chain

import django
from django.utils import timezone
from telebot import types

import buttons
from const import bot
from menu import menu
from profile import profile_menu

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DavinCHBot.settings')
django.setup()

from users.models import User, Status, LikeUsers, Report, Ad


def is_point_in_circle(latitude, longitude, circle_center_latitude, circle_center_longitude, radius_km=100):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–≥–ª—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
    latitude = math.radians(latitude)
    longitude = math.radians(longitude)
    circle_center_latitude = math.radians(circle_center_latitude)
    circle_center_longitude = math.radians(circle_center_longitude)

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–æ–π –∏ —Ü–µ–Ω—Ç—Ä–æ–º –∫—Ä—É–≥–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ì–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    distance_km = 2 * 6371 * math.asin(math.sqrt(
        math.sin((circle_center_latitude - latitude) / 2) ** 2 +
        math.cos(circle_center_latitude) * math.cos(latitude) *
        math.sin((circle_center_longitude - longitude) / 2) ** 2
    ))

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å —Ä–∞–¥–∏—É—Å–æ–º
    return distance_km <= radius_km


def get_user(user):
    from_age, to_age = map(int, user.find_age.split('-'))
    age = [i for i in range(from_age, to_age + 1)]
    category = [user.category]
    find_gender = [user.find_gender]
    if category[0] == '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—èü´†':
        category = ['–°–µ—Ä—å—ë–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—èüíû', '–°–≤–æ–±–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è‚ù§Ô∏è‚Äçüî•', '–î—Ä—É–∂–±–∞ü´°', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—èü´†']
    if find_gender[0] == '–ª—é–±–æ–π':
        find_gender = ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']
    if user.gender == '–º—É–∂—Å–∫–æ–π':
        user_find_gender = ['–º—É–∂—Å–∫–æ–π', '–ª—é–±–æ–π']
    else:
        user_find_gender = ['–∂–µ–Ω—Å–∫–∏–π', '–ª—é–±–æ–π']
    users = User.objects.filter(age__in=age, gender__in=find_gender, category__in=category, active=True,
                                find_gender__in=user_find_gender)
    for usr in users:
        find_age = list(map(int, usr.find_age.split('-')))
        if find_age[0] <= user.age <= find_age[1]:
            if not Status.objects.filter(to_user=usr, form_user=user) and usr != user:
                if is_point_in_circle(latitude=usr.latitude, longitude=usr.longitude,
                                      circle_center_latitude=user.latitude,
                                      circle_center_longitude=user.longitude):
                    return usr
    return None


def send_ad_photo(ad):
    medias = []
    if ad.photo1:
        medias.append(types.InputMediaPhoto(media=ad.photo1))
    if ad.photo2:
        medias.append(types.InputMediaPhoto(media=ad.photo2))
    if ad.photo3:
        medias.append(types.InputMediaPhoto(media=ad.photo3))
    return medias


def send_questionnaires(chat_id, user):
    n = True
    if random.randint(1, 100) <= 200 and (not user.last_ad_time or user.last_ad_time.timestamp() < (
            timezone.now() - datetime.timedelta(hours=1)).timestamp()):
        try:
            ad = random.choice(Ad.objects.filter(is_active=True))
            user.last_ad_time = timezone.now()
            user.save(update_fields=['last_ad_time'])
            medias = send_ad_photo(ad)
            if medias:
                bot.send_media_group(chat_id=chat_id, media=medias)
            bot.send_message(chat_id=chat_id, text=ad.text, reply_markup=buttons.watch_questionnaire())
            n = False
        except Exception:
            pass
    if n:
        try:
            questionnaire = get_user(user=user)
            if not questionnaire:
                raise Exception
        except Exception as e:
            bot.send_message(chat_id=chat_id,
                             text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Ç–µ–±—è –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ü•π',
                             reply_markup=buttons.go_to_menu())
        else:
            send_profile(chat_id, questionnaire, buttons.questionnaire_menu(questionnaire.chat_id))


def add_media(medias, avatar_data):
    type, media_id = avatar_data.split()
    if type == 'photo':
        medias.append(types.InputMediaPhoto(media=media_id))
    else:
        medias.append(types.InputMediaVideo(media=media_id))
    return medias


def send_profile(chat_id, user, markup):
    text = f'{user.status()} {user.name}, {user.age}, {user.city}, {user.category}\n\n' \
           f'–û —Å–µ–±–µ: {user.description}'
    medias = []
    for i in user.avatars.all()[:3]:
        medias = add_media(medias, i.file_id)
    try:
        msg = bot.send_media_group(chat_id=chat_id, media=medias)
    except Exception:
        pass
    bot.send_message(chat_id=chat_id, text=text, reply_markup=markup)


def send_message_to_questionnaire(questionnaire):
    if not questionnaire.last_like or (
            questionnaire.last_like.timestamp() <= (timezone.now() - datetime.timedelta(minutes=5)).timestamp()):
        text = f'–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å {questionnaire.like_users.all().count()} –ª—é–¥—è–º'
        bot.send_message(chat_id=questionnaire.chat_id, text=text, reply_markup=buttons.watch_like())
        questionnaire.update_last_like()


def like(chat_id, user, questionnaire_chat_id):
    try:
        questionnaire = User.objects.get(chat_id=questionnaire_chat_id)
        like_user = LikeUsers.objects.create(send_like=user)
        questionnaire.like_users.add(like_user)
        send_message_to_questionnaire(questionnaire=questionnaire)
    except Exception:
        pass
    send_questionnaires(chat_id=chat_id, user=user)


def send_message_or_video(message, chat_id, user, questionnaire_chat_id):
    try:
        questionnaire = User.objects.get(chat_id=questionnaire_chat_id)
        like_user = LikeUsers.objects.create(send_like=user, message_id=message.id)
        questionnaire.like_users.add(like_user)
        send_message_to_questionnaire(questionnaire=questionnaire)
    except Exception:
        pass
    send_questionnaires(chat_id=chat_id, user=user)


def watch_like(questionnaire_chat_id, questionnaire):
    if questionnaire.like_users.all():
        like = questionnaire.like_users.first()
        user = like.send_like
        send_profile(questionnaire_chat_id, user, buttons.answer_on_like(user.chat_id))
        if like.message_id:
            try:
                bot.copy_message(chat_id=questionnaire_chat_id, from_chat_id=user.chat_id, message_id=like.message_id)
            except Exception:
                pass
    else:
        text = '–ú—ç—Ç—á–µ–π –ø–æ–∫–∞ –Ω–µ—Çü•≤'
        bot.send_message(chat_id=questionnaire_chat_id, text=text, reply_markup=buttons.continue_watch())


def answer_like(chat_id, user_id):
    questionnaire = User.objects.get(chat_id=chat_id)
    user = User.objects.get(chat_id=user_id)
    try:
        send_profile(chat_id=chat_id, user=user, markup=None)
        bot.send_message(chat_id=chat_id, text='–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ –õ–°',
                         reply_markup=buttons.send_link_on_chat(user_id=user_id))
    except Exception as e:
        pass
    try:
        send_profile(chat_id=user_id, user=questionnaire, markup=None)
        bot.send_message(chat_id=user_id,
                         text='–¢–µ–±–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é –Ω–∞ –ª–∞–π–∫. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ –õ–°',
                         reply_markup=buttons.send_link_on_chat(user_id=chat_id))
    except Exception as e:
        pass
    for i in questionnaire.like_users.all():
        if i.send_like == user:
            i.delete()
    watch_like(questionnaire_chat_id=chat_id, questionnaire=questionnaire)


def report(message, chat_id, user, user_id):
    if message.content_type == 'text':
        bot.send_message(chat_id=chat_id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—é –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
        menu(chat_id=chat_id, user=user)
        report_user = User.objects.filter(chat_id=user_id)
        if user:
            Report.objects.create(user=report_user[0], text=message.text)
    else:
        msg = bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –æ–±—ä—è—Å–Ω—è–µ—à—å –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã')
        bot.register_next_step_handler(msg, report, chat_id, user, user_id)


def add_action(type, user, questionnaire_chat_id):
    try:
        to_user = User.objects.get(chat_id=questionnaire_chat_id)
        Status.objects.create(
            form_user=user,
            to_user=to_user,
            type=type
        )
    except Exception:
        pass


def add_answer(user_id, to_user):
    user = User.objects.get(chat_id=user_id)
    Status.objects.get_or_create(
        form_user=user,
        to_user=to_user,
        type='–ª–∞–π–∫',
        have_answer=True
    )


def answer_dislike(chat_id, user_id):
    questionnaire = User.objects.get(chat_id=chat_id)
    user = User.objects.get(chat_id=user_id)
    for i in questionnaire.like_users.all():
        if i.send_like == user:
            i.delete()
    watch_like(questionnaire_chat_id=chat_id, questionnaire=questionnaire)


def callback(data, chat_id, user):
    if len(data) == 0:
        send_questionnaires(chat_id=chat_id, user=user)
    elif data[0] == 'like':
        add_action('–ª–∞–π–∫', user, data[1])
        like(chat_id=chat_id, user=user, questionnaire_chat_id=data[1])
    elif data[0] == 'dislike':
        add_action('–¥–∏–∑–ª–∞–π–∫', user, data[1])
        send_questionnaires(chat_id=chat_id, user=user)
    elif data[0] == 'sleep':
        profile_menu(chat_id=chat_id, user=user)
    elif data[0] == 'send_message_or_video':
        add_action('–ª–∞–π–∫', user, data[1])
        msg = bot.send_message(chat_id=chat_id,
                               text='–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –≤–∏–¥–µ–æ, –∫—Ä—É–∂–æ—á–µ–∫ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ')
        bot.register_next_step_handler(msg, send_message_or_video, chat_id, user, data[1])
    elif data[0] == 'answer_like':
        add_action('–ª–∞–π–∫', user, data[1])
        answer_like(chat_id=chat_id, user_id=data[1])
    elif data[0] == 'answer_dislike':
        add_action('–¥–∏–∑–ª–∞–π–∫', user, data[1])
        answer_dislike(chat_id=chat_id, user_id=data[1])
    elif data[0] == 'report':
        add_action('–∂–∞–ª–æ–±–∞', user, data[1])
        msg = bot.send_message(chat_id=chat_id, text='–û–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É —Ç–≤–æ–µ–π –∂–∞–ª–æ–±—ã')
        bot.register_next_step_handler(msg, report, chat_id, user, data[1])
    elif data[0] == 'watch_like':
        watch_like(questionnaire_chat_id=chat_id, questionnaire=user)
