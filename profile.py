import os
import random

import django
from django.core.files import File
from telebot import types

import buttons
import coord
from const import bot, simbols
from menu import menu
from users.models import Photo

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'DavinCHBot.settings')
django.setup()


def edit_photo(message, chat_id, user, number):
    if message.content_type == 'photo':
        avatar_id = f'photo {message.photo[-1].file_id}'
        if number == '1':
            avatar = user.avatars.all()[0]
            avatar.file_id = avatar_id
            avatar.save()
        else:
            try:
                avatar = user.avatars.all()[int(number) - 1]
                avatar.file_id = avatar_id
                avatar.save()
            except Exception:
                avatar = Photo.objects.create(file_id=avatar_id)
                user.avatars.add(avatar)
        user.is_checked = False
        user.save(update_fields='is_checked')
        photo(chat_id=chat_id, user=user)
    elif message.content_type == 'video':
        avatar_id = f'video {message.video.file_id}'
        if number == '1':
            avatar = user.avatars.all()[0]
            avatar.file_id = avatar_id
            avatar.save()
        else:
            try:
                avatar = user.avatars.all()[int(number) - 1]
                avatar.file_id = avatar_id
                avatar.save()
            except Exception:
                avatar = Photo.objects.create(file_id=avatar_id)
                user.avatars.add(avatar)
        user.is_checked = False
        user.save()
        photo(chat_id=chat_id, user=user)
    else:
        msg = bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é/–≤–∏–¥–µ–æ',
                               reply_markup=buttons.go_back('edit_profile|photo'))
        bot.register_next_step_handler(msg, edit_photo, chat_id, user, number)


def edit_city(message, chat_id, user):
    if message.content_type == 'text':
        name = message.text.lower()
        city, latitude, longitude = coord.get_coord_by_name(name)
        if not city:
            msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏ –≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞',
                                   reply_markup=buttons.send_locaton())
            bot.register_next_step_handler(msg, edit_city, chat_id, user)
        else:
            user.city = city
            user.latitude = latitude
            user.longitude = longitude
            user.is_checked = False
            user.save(update_fields=['city', 'latitude', 'longitude', 'is_checked'])
            profile_menu(chat_id=chat_id, user=user)
    elif message.content_type == 'location':
        latitude = float(message.location.latitude)
        longitude = float(message.location.longitude)
        city, latitude, longitude = coord.get_city_by_coord(latitude=latitude, longitude=longitude)
        if not city:
            msg = bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å –≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã',
                                   reply_markup=buttons.send_locaton())
            bot.register_next_step_handler(msg, edit_city, chat_id, user)
        else:
            user.city = city
            user.latitude = latitude
            user.longitude = longitude
            user.is_checked = False
            user.save(update_fields=['city', 'latitude', 'longitude', 'is_checked'])
            profile_menu(chat_id=chat_id, user=user)
    else:
        msg = bot.send_message(chat_id=chat_id,
                               text='–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π',
                               reply_markup=buttons.send_locaton())
        bot.register_next_step_handler(msg, edit_city, chat_id, user)


def edit_description(message, chat_id, user):
    if message.content_type != 'text':
        msg = bot.send_message(chat_id=chat_id, text='–ù–∞–ø–∏—à–∏ –æ —Å–µ–±–µ(–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)', reply_markup=buttons.skip())
        bot.register_next_step_handler(msg, edit_description, chat_id, user)
    else:
        description = message.text
        if description == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            description = 'ü´¢ü§´'
        ln = len(description)
        if ln > 800:
            msg = bot.send_message(chat_id=chat_id, text=f'–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 800 —Å–∏–º–≤–æ–ª–æ–≤. –£ –≤–∞—Å:{ln}',
                                   reply_markup=buttons.skip())
            bot.register_next_step_handler(msg, edit_description, chat_id, user)
        else:
            user.description = description
            user.save(update_fields=['description'])
            profile_menu(chat_id=chat_id, user=user)


def edit_age(message, chat_id, user):
    if message.content_type != 'text':
        msg = bot.send_message(chat_id=chat_id, text='–ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç',
                               reply_markup=buttons.go_back('edit_profile'))
        bot.register_next_step_handler(msg, edit_age, chat_id, user)
    else:
        try:
            age = int(message.text)
            if age < 16 or age > 99:
                raise Exception
        except Exception:
            msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ 15 –∏ –º–µ–Ω—å—à–µ 100',
                                   reply_markup=buttons.go_back('edit_profile'))
            bot.register_next_step_handler(msg, edit_age, chat_id, user)
        else:
            user.age = age
            user.is_checked = False
            user.save(update_fields=['age', 'is_checked'])
            profile_menu(chat_id=chat_id, user=user)


def profile_menu(chat_id, user):
    text = f'{user.status()} {user.name}, {user.age}, {user.city}, {user.category}\n\n' \
           f'–û —Å–µ–±–µ: {user.description}'
    medias = []
    for i in user.avatars.all()[:3]:
        medias = add_media(medias, i.file_id)
    try:
        m = bot.send_media_group(chat_id=chat_id, media=medias)
    except Exception:
        pass
    bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons.profile_menu())


def add_media(medias, avatar_data):
    type, media_id = avatar_data.split()
    if type == 'photo':
        medias.append(types.InputMediaPhoto(media=media_id))
    else:
        medias.append(types.InputMediaVideo(media=media_id))
    return medias


def photo(chat_id, user):
    medias = []
    for i in user.avatars.all()[:3]:
        medias = add_media(medias, i.file_id)
    bot.send_media_group(chat_id=chat_id, media=medias)
    bot.send_message(chat_id=chat_id, text='–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ,',
                     reply_markup=buttons.edit_photo())


def verefi(message, chat_id, user, simbol):
    if not user.is_checked:
        if message.content_type != 'photo':
            msg = bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
            bot.register_next_step_handler(msg, verefi, chat_id, user)
        else:
            file_id = message.photo[-1].file_id
            check_photo = Photo.objects.create(file_id=f'photo {file_id}')
            user.check_simbol = simbol
            user.need_verefi = True
            user.check_photo = check_photo
            user.save(update_fields=['need_verefi', 'check_photo', 'check_simbol'])
            menu(chat_id=chat_id, user=user)
    else:
        bot.send_message(chat_id=chat_id, text='–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', reply_markup=buttons.go_to_menu())


def edit_name(message, chat_id, user):
    if message.content_type != 'text':
        msg = bot.send_message(chat_id=chat_id, text='–ù–∞–ø–∏—à–∏ –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç',
                               reply_markup=buttons.go_back('edit_profile'))
        bot.register_next_step_handler(msg, edit_name, chat_id, user)
    else:
        name = message.text
        ln = len(name)
        if ln > 100:
            msg = bot.send_message(chat_id=chat_id, text='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ 100 —Å–∏–º–≤–æ–ª–æ–≤',
                                   reply_markup=buttons.go_back('edit_profile'))
            bot.register_next_step_handler(msg, edit_name, chat_id, user)
        else:
            user.name = name
            user.is_checked = False
            user.save(update_fields=['name', 'is_checked'])
            profile_menu(chat_id=chat_id, user=user)


def edit_gender(message, chat_id, user):
    if message.content_type != 'text':
        msg = bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
                               reply_markup=buttons.gender())
        bot.register_next_step_handler(msg, edit_gender, chat_id, user)
    else:
        gender = message.text
        if gender not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']:
            msg = bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
                                   reply_markup=buttons.gender())
            bot.register_next_step_handler(msg, edit_gender, chat_id, user)
        else:
            user.gender = gender
            user.save(update_fields=['name'])
            profile_menu(chat_id=chat_id, user=user)


# def edit_category(message, chat_id, user):
#     if message.content_type != 'text':
#         msg = bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
#                                reply_markup=buttons.category())
#         bot.register_next_step_handler(msg, edit_category, chat_id, user)
#     else:
#         category = message.text
#         if category not in ['–°–µ—Ä—å—ë–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—èüíû', '–°–≤–æ–±–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è‚ù§Ô∏è‚Äçüî•', '–î—Ä—É–∂–±–∞ü´°', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—èü´†']:
#             msg = bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
#                                    reply_markup=buttons.category())
#             bot.register_next_step_handler(msg, edit_category, chat_id, user)
#         else:
#             user.category = category
#             user.save(update_fields=['category'])
#             profile_menu(chat_id=chat_id, user=user)


def callback(data, chat_id, user):
    if len(data) == 0:
        profile_menu(chat_id, user)
    elif data[0] == 'photo':
        photo(chat_id=chat_id, user=user)
    elif data[0] == 'edit_photo':
        msg = bot.send_message(chat_id=chat_id, text='–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é/–≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—É—é –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                               reply_markup=buttons.go_back('edit_profile'))
        bot.register_next_step_handler(msg, edit_photo, chat_id, user, data[-1])
    elif data[0] == 'city':
        msg = bot.send_message(chat_id=chat_id,
                               text='–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ç–æ—á–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:)',
                               reply_markup=buttons.send_locaton())
        bot.register_next_step_handler(msg, edit_city, chat_id, user)
    elif data[0] == 'description':
        msg = bot.send_message(chat_id=chat_id, text='–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µüòâ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)',
                               reply_markup=buttons.skip())
        bot.register_next_step_handler(msg, edit_description, chat_id, user)
    elif data[0] == 'age':
        msg = bot.send_message(chat_id=chat_id, text='–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?', reply_markup=buttons.go_back('edit_profile'))
        bot.register_next_step_handler(msg, edit_age, chat_id, user)
    elif data[0] == 'go_sleep':
        user.active = False
        user.save(update_fields=['active'])
        profile_menu(chat_id=chat_id, user=user)
    elif data[0] == 'delite':
        user.delete()
        bot.send_message(chat_id=chat_id, text='–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=buttons.create())
    elif data[0] == 'verefi':
        simbol = random.choice(simbols)
        text = f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–∏–º–≤–æ–ª–æ–º: {simbol}'
        msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons.go_back('menu'))
        bot.register_next_step_handler(msg, verefi, chat_id, user, simbol)
    elif data[0] == 'name':
        msg = bot.send_message(chat_id=chat_id, text='–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', reply_markup=buttons.go_back('edit_profile'))
        bot.register_next_step_handler(msg, edit_name, chat_id, user)
    elif data[0] == 'gender':
        msg = bot.send_message(chat_id=chat_id, text='–¢–≤–æ–π –ø–æ–ª?', reply_markup=buttons.gender())
        bot.register_next_step_handler(msg, edit_gender, chat_id, user)
    # elif data[0] == 'category':
    #     msg = bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏ –¥–ª—è —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞',
    #                            reply_markup=buttons.category())
    #     bot.register_next_step_handler(msg, edit_category, chat_id, user)
